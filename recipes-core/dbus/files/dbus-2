#! /bin/sh
### BEGIN INIT INFO
# Provides:          dbus
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      1
# Short-Description: D-Bus Session message bus
# Description:       D-Bus is a simple interprocess messaging system, used
#                    for sending messages between applications.  this provides
#                    a localized bus for communicating among processes.
### END INIT INFO
#
# -*- coding: utf-8 -*-
# Debian init.d script for D-BUS
# Copyright Â© 2003 Colin Walters <walters@debian.org>


# To use the session bus in your process, 
#       1. put its init script after this one
#       2. examine the $ADDRFILE file (see below) to get the bus address.
#       3. examine the $PIDFILE  file (see below) to get the PID of the daemon
#          that manages the bus. (Usually to see if it is already running.)
set -e

DAEMON=/usr/bin/dbus-daemon
NAME=dbus
DAEMONUSER=messagebus
PIDDIR=/var/run/dbus
PIDFILE=$PIDDIR/SessionBusPid.txt
ADDRFILE=$PIDDIR/SessionBusAddress.txt
UUIDDIR=/var/run/dbus
DESC="Session message bus"
EVENTDIR=/etc/dbus-1/event.d

# this is the default address of the session bus.  But it can be
# overridden by the session.addr file.  This is just the root of the address though,
# the dbus-daemon adds a guid to the end of it.
SESSIONADDR="/etc/dbus-1/session.addr"
DBUSADDR="unix:path=/tmp/dbusservice"
if [ -e $SESSIONADDR ]; then
  DBUSADDR=`cat $SESSIONADDR`
fi

test -x $DAEMON || exit 0

# Source defaults file; edit that file to configure this script.
ENABLED=1
PARAMS=""
if [ -e /etc/default/dbus ]; then
      . /etc/default/dbus
fi
test "$ENABLED" != "0" || exit 0


start_it_up()
{
  # create the dir where we store our contact info.
  if [ ! -d $PIDDIR ]; then
    mkdir -p $PIDDIR
    chown $DAEMONUSER $PIDDIR
    chgrp $DAEMONUSER $PIDDIR
  fi
  # check to see if we are already running.  
  if [ -e $PIDFILE ]; then
    PIDDIR=/proc/$(cat $PIDFILE)
    if [ -d ${PIDDIR} -a  "$(readlink -f ${PIDDIR}/exe)" = "${DAEMON}" ]; then 
      echo "$DESC already started; not starting."
    else
      echo "Removing stale PID file $PIDFILE."
      rm -f $PIDFILE
    fi
  fi

  if [ ! -d $UUIDDIR ]; then
    mkdir -p $UUIDDIR
    chown $DAEMONUSER $UUIDDIR
    chgrp $DAEMONUSER $UUIDDIR
  fi
 
 # dbus-uuidgen --ensure=/var/run/dbus/machine-id

  echo -n "Starting $DESC: "
  # set -x
  # following line doesn't work to start session bus from init scripts, so we replaced it.
  # start-stop-daemon --start --pidfile $PIDFILE --user $DAEMONUSER --exec $DAEMON -- --session $PARAMS
  # $DAEMON --session --fork --address $DBUSADDR --print-pid 5 5>$PIDFILE
  $DAEMON --session --fork \
          --address ${DBUSADDR} \
          --print-address 5 5>${ADDRFILE} \
          --print-pid     6 6>${PIDFILE}
  echo "$NAME."
  #echo DBus Machine name is `cat /var/run/dbus/machine-id`
  echo Session bus address is stored in ${ADDRFILE}
  echo Session bus address is `cat ${ADDRFILE}`
  echo Session Process ID  is stored in ${PIDFILE}
  # now that the bus is started, export the address to a variable that the glib dbus bindings look for

  # this would execute all the scripts in $EVENTDIR, passing each one the argument "start".
  # we don't use this right now.  
  if [ -d $EVENTDIR ]; then
      run-parts --arg=start $EVENTDIR
  fi
}

shut_it_down()
{
  if [ -d $EVENTDIR ]; then
      # TODO: --reverse when busybox supports it
      run-parts --arg=stop $EVENTDIR
  fi
  echo -n "Stopping $DESC: "
  # following line doesn't work to stop session bus that was launched from init scripts, so we replaced it too.
  # start-stop-daemon --stop  --quiet --pidfile $PIDFILE --user $DAEMONUSER
  if [ -e $PIDFILE ]; then
    kill `cat $PIDFILE`
  fi

  # We no longer include these arguments so that start-stop-daemon
  # can do its job even given that we may have been upgraded.
  # We rely on the pidfile being sanely managed
  # --exec $DAEMON -- --system $PARAMS
  echo "$NAME."
  rm -f $PIDFILE
  unset DBUS_SESSION_BUS_ADDRESS
}

reload_it()
{
  echo -n "Reloading $DESC config: "
  dbus-send --print-reply --session --type=method_call \
            --dest=org.freedesktop.DBus \
            / org.freedesktop.DBus.ReloadConfig > /dev/null
  # hopefully this is enough time for dbus to reload it's config file.
  echo "done."
}

case "$1" in
  start)
    start_it_up
  ;;
  stop)
    shut_it_down
  ;;
  reload|force-reload)
    reload_it
  ;;
  restart)
    shut_it_down
    sleep 1
    start_it_up
  ;;
  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|restart|reload|force-reload}" >&2
    exit 1
  ;;
esac

exit 0
